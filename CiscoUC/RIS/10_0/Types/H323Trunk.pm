package CiscoUC::RIS::10_0::Types::H323Trunk;
use strict;
use warnings;


__PACKAGE__->_set_element_form_qualified(1);

sub get_xmlns { 'http://schemas.cisco.com/ast/soap' };

our $XML_ATTRIBUTE_CLASS;
undef $XML_ATTRIBUTE_CLASS;

sub __get_attr_class {
    return $XML_ATTRIBUTE_CLASS;
}

use Class::Std::Fast::Storable constructor => 'none';
use base qw(SOAP::WSDL::XSD::Typelib::ComplexType);

Class::Std::initialize();

{ # BLOCK to scope variables

my %ConfigName_of :ATTR(:get<ConfigName>);
my %TechPrefix_of :ATTR(:get<TechPrefix>);
my %Zone_of :ATTR(:get<Zone>);
my %RemoteCmServer1_of :ATTR(:get<RemoteCmServer1>);
my %RemoteCmServer2_of :ATTR(:get<RemoteCmServer2>);
my %RemoteCmServer3_of :ATTR(:get<RemoteCmServer3>);
my %AltGkList_of :ATTR(:get<AltGkList>);
my %ActiveGk_of :ATTR(:get<ActiveGk>);
my %CallSignalAddr_of :ATTR(:get<CallSignalAddr>);
my %RasAddr_of :ATTR(:get<RasAddr>);

__PACKAGE__->_factory(
    [ qw(        ConfigName
        TechPrefix
        Zone
        RemoteCmServer1
        RemoteCmServer2
        RemoteCmServer3
        AltGkList
        ActiveGk
        CallSignalAddr
        RasAddr

    ) ],
    {
        'ConfigName' => \%ConfigName_of,
        'TechPrefix' => \%TechPrefix_of,
        'Zone' => \%Zone_of,
        'RemoteCmServer1' => \%RemoteCmServer1_of,
        'RemoteCmServer2' => \%RemoteCmServer2_of,
        'RemoteCmServer3' => \%RemoteCmServer3_of,
        'AltGkList' => \%AltGkList_of,
        'ActiveGk' => \%ActiveGk_of,
        'CallSignalAddr' => \%CallSignalAddr_of,
        'RasAddr' => \%RasAddr_of,
    },
    {
        'ConfigName' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'TechPrefix' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'Zone' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'RemoteCmServer1' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'RemoteCmServer2' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'RemoteCmServer3' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'AltGkList' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'ActiveGk' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'CallSignalAddr' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'RasAddr' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
    },
    {

        'ConfigName' => 'ConfigName',
        'TechPrefix' => 'TechPrefix',
        'Zone' => 'Zone',
        'RemoteCmServer1' => 'RemoteCmServer1',
        'RemoteCmServer2' => 'RemoteCmServer2',
        'RemoteCmServer3' => 'RemoteCmServer3',
        'AltGkList' => 'AltGkList',
        'ActiveGk' => 'ActiveGk',
        'CallSignalAddr' => 'CallSignalAddr',
        'RasAddr' => 'RasAddr',
    }
);

} # end BLOCK







1;


=pod

=head1 NAME

CiscoUC::RIS::10_0::Types::H323Trunk

=head1 DESCRIPTION

Perl data type class for the XML Schema defined complexType
H323Trunk from the namespace http://schemas.cisco.com/ast/soap.






=head2 PROPERTIES

The following properties may be accessed using get_PROPERTY / set_PROPERTY
methods:

=over

=item * ConfigName


=item * TechPrefix


=item * Zone


=item * RemoteCmServer1


=item * RemoteCmServer2


=item * RemoteCmServer3


=item * AltGkList


=item * ActiveGk


=item * CallSignalAddr


=item * RasAddr




=back


=head1 METHODS

=head2 new

Constructor. The following data structure may be passed to new():

 { # CiscoUC::RIS::10_0::Types::H323Trunk
   ConfigName =>  $some_value, # string
   TechPrefix =>  $some_value, # string
   Zone =>  $some_value, # string
   RemoteCmServer1 =>  $some_value, # string
   RemoteCmServer2 =>  $some_value, # string
   RemoteCmServer3 =>  $some_value, # string
   AltGkList =>  $some_value, # string
   ActiveGk =>  $some_value, # string
   CallSignalAddr =>  $some_value, # string
   RasAddr =>  $some_value, # string
 },




=head1 AUTHOR

Generated by SOAP::WSDL

=cut

